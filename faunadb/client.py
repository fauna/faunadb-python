from .errors import InvalidQuery
from ._json import parse_json

class Client(object):
  """
  Main class for communicating directly with FaunaDB.
  Use this instead of Connection!
  Client lets you send most anything through to FaunaDB.
  For a more structured approach, see various methods on Model that use a Client.

  Methods return responses converted from JSON to dicts.
  The types in faunadb.objects will be converted from JSON as well,
  so instead of returning { "@ref": "users/123" } you will get a Ref("users/123").

  Response dict will also have "headers" containing HTTP headers of the response.
  """

  def __init__(self, connection):
    self.connection = connection

  #region REST
  def get(self, path, query=None, pagination=None):
    """
    HTTP GET. See https://faunadb.com/documentation#rest.

    :param path: Path relative to connection.domain. May be a Ref.
    :param query: Dict to be converted to URL parameters.
    :param pagination: Dict containing pagination info.
    :return: Response dict.
    """

    return self.get_with_headers(path, query, pagination).response

  def get_with_headers(self, path, query=None, pagination=None):
    "Like `get` but returns a ResponseWithHeaders."
    query = (query or {})
    if pagination is not None:
      query.update(pagination)
    return _resource_and_headers(self.connection.get(str(path), query))

  def post(self, path, data=None):
    """
    HTTP POST. See https://faunadb.com/documentation#rest.
    :param path: Path relative to connection.domain. May be a Ref.
    :param data: Dict to be converted to request JSON. May contain types in faunadb.objects.
    :return: Response dict.
    """

    return _just_resource(self.connection.post(str(path), data))

  def post_with_headers(self, path, data=None):
    "Like `post` but returns a ResponseWithHeaders. See https://faunadb.com/documentation#rest."
    return _resource_and_headers(self.connection.post(str(path), data))

  def put(self, path, data=None):
    "Like Client.post, but a PUT request."
    return _just_resource(self.connection.put(str(path), data))

  def put_with_headers(self, path, data=None):
    "Like `put` but returns a ResponseWithHeaders."
    return _resource_and_headers(self.connection.put(str(path), data))

  def patch(self, path, data=None):
    "Like Client.post, but a PATCH request. See https://faunadb.com/documentation#rest."
    return _just_resource(self.connection.patch(str(path), data))

  def patch_with_headers(self, path, data=None):
    "Like `patch` but returns a ResponseWithHeaders."
    return _resource_and_headers(self.connection.patch(str(path), data))

  def delete(self, path, data=None):
    """
    Like Client.delete, but a DELETE request.  See https://faunadb.com/documentation#rest.
    Returns headers dict.
    """
    return self.connection.delete(str(path), data)
  #endregion

  def query(self, expression):
    """
    Use the FaunaDB query API. See See https://faunadb.com/documentation#queries.

    :param query: Dict generated by functions in faunadb.query.
    :return: Response dict.
    """

    def get_quote():
      'Get the "quote" value from params.'
      params = expression["params"]
      if "object" in params:
        raise InvalidQuery("%s does not support object, use quote")
      return params["quote"]

    for method in ["get", "create", "update", "replace", "delete"]:
      ref = expression.get(method)
      if ref:
        if str(ref.to_class()) in {"databases", "keys"}:
          if method == "get":
            return self.get(ref, {"ts": expression["ts"]})
          elif method == "create":
            return self.post(ref, get_quote())
          elif method == "update":
            return self.patch(ref, get_quote())
          elif method == "replace":
            return self.put(ref, get_quote())
          else:
            return self.delete(ref)

    return self.post("", expression)

  # TODO:TEST
  def ping(self):
    # TODO
    pass

class ResponseWithHeaders(object):
  """
  Both a JSON response body and the HTTP headers that came with it.
  Headers contain metadata that may be useful.
  See faunadb.com/documentation#guide-protocol
  """

  def __init__(self, response, headers):
    "Create a new ResponseWithHeaders."
    self.response = response
    """
    The converted JSON response.
    `get_with_headers(...).response` is the same as `get(...)`.
    """
    self.headers = headers
    "Dict of HTTP headers."

def _just_resource(body_headers):
  'Convert response JSON to a dict with "headers".'
  return _resource(body_headers[0])

def _resource_and_headers(body_headers):
  "Parse response to ResponseWithHeaders."
  body, headers = body_headers
  return ResponseWithHeaders(_resource(body), headers)

def _resource(body):
  "Gets the 'resource' out of a JSON response."
  return parse_json(body)["resource"]
